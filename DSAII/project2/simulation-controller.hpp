#ifndef SIMULATION_CONTROLLER_HPP
#define SIMULATION_CONTROLLER_HPP

#include "./math-model.hpp"
#include "./fifo-queue.hpp"
#include "./priority-queue.hpp"
#include "customer.hpp"
#include <string>

class SimulationController {
    private:
        // Math model for statistical analysis
        MathModel model;

        // Queue data structures for handling events and scheduling
        FIFOQueue fQueue; // Holds arrival events waiting for an open service channel
        PriorityQueue pQueue; // Holds future scheduled events

        // Main statistical variables for model predictions
        float lambda;
        float mu;
        float numServiceChannels;

        // Helper variables
        int numCustomersToGenerate;
        int serverAvailableCnt;
        float currTime;
        float nextArrivalTime;

        // Variables for simulation statistic calculations
        int customerWaitedCnt;
        float totalWaitTime;
        float totalServiceTime;
        float idleTime;
        int customersProcessed;
        float lastDepartureTime;
        float totalCustomerTimeInSystem;
        float totalCustomerTimeInQueue;

        // Helper functions
        void clearVariables(); // Sets variables to 0
        void loadModel(std::string filename); // Reads values from given file into stat variables
        void processStatistics(Customer* cust); // Processes relevant statistics on departure event
        void printStatistics(); // Tallies final simulation statistics and outputs to the terminal
        void addArrivals(); // Generates new arrivals at random intervals generated by a negative exponential distribution model
        void processNextEvent(); // Handles the next scheduled event
    public:
        // Default constructor
        SimulationController();

        // Runs the simulation using the values in a provided file
        void runSimulation(std::string filename);
};

#endif